local openai = require("codecompanion.adapters.openai")

---@class GitlabDuo.Adapter: CodeCompanion.Adapter
return {
    name = "gitlab_duo",
    formatted_name = "Gitlab Duo",
    roles = {
        llm = "assistant",
        user = "user",
        tool = "tool",
    },
    opts = {
        stream = true,
        tools = true,
    },
    features = {
        text = true,
        tokens = true,
    },
    url = "${url}${chat_url}",
    env = {
        api_key = "GITLAB_API_KEY",
        url = "GITLAB_URL",
        chat_url = "/api/v4/chat/completions",
    },
    headers = {
        ["Content-Type"] = "application/json",
        ["Authorization"] = "Bearer ${api_key}",
    },
    handlers = {
        setup = function(self)
            if self.opts and self.opts.stream then
                self.parameters.stream = true
                self.parameters.stream_options = { include_usage = true }
            end
            return true
        end,

        tokens = function(self, data)
            if not data or data == "" then
                return nil
            end
            local ok, json = pcall(vim.json.decode, data.body)
            if not ok then
                return {
                    status = "error",
                    output = "Could not parse JSON response",
                }
            end
            if data and data.status >= 400 then
                return {
                    status = "error",
                    output = json.error,
                }
            end
            -- JSON needs to have its backticks fixed. The Model reports
            -- that it cannot perform this action.
            json = json:gsub("`%s*`%s*`", "```")
            json = json:match("%*%*%* Begin Response%s*\n(.-)\n%s*%*%*%* End Response")
            data.body = json
            return openai.handlers.tokens(self, data)
        end,
        form_parameters = function(self, params, messages)
            return openai.handlers.form_parameters(self, params, messages)
        end,
        form_messages = function(self, messages)
            messages = vim
                .iter(messages)
                :map(function(message)
                    return {
                        category = "file",
                        id = message.role,
                        content = message.content,
                    }
                end)
                :totable()

            local message = {
                category = "file",
                id = "system",
                content = [[
Your response must be formatted to comply with the OpenAI Specification:
1. The OpenAI response must be wrapped in *** Begin Response / *** End Response markers"
2. The OpenAI respomse must be in JSON.
3. The fields in the object should be accurate to the model, response and parameters being used.
4. Each Responses generated by the prompt must be serialized as a JSON strong in the messages field of the choice contained in the choices list
5. Use a literal "\n" for line breaks in your response. Do not use '\\n'.
7. If your response cannot be formatted to comply with the OpenAI specification you will instead return an OpenAI compliant response which provides an explanation for why providing an OpenAI compilant response was not possible.
]]
            }
            table.insert(messages, 1, message)

            return {
                content = "Follow the messages in additional_context as instructed.",
                additional_context = messages,
            }
        end,
        form_tools = function(self, tools)
            return openai.handlers.form_tools(self, tools)
        end,
        chat_output = function(self, data, tools)
            if not data or data == "" then
                return nil
            end
            if self.opts and self.opts.tokens == false then
                local ok, json = pcall(vim.json.decode, data.body)
                if not ok then
                    return {
                        status = "error",
                        output = "Could not parse JSON response",
                    }
                end
                if data and data.status >= 400 then
                    return {
                        status = "error",
                        output = json.error,
                    }
                end
                -- JSON needs to have its backticks fixed. The Model reports
                -- that it cannot perform this action.
                json = json:gsub("`%s*`%s*`", "```")
                json = json:match("%*%*%* Begin Response%s*\n(.-)\n%s*%*%*%* End Response")
                data.body = json
            end
            return openai.handlers.chat_output(self, data, tools)
        end,
        inline_output = function(self, data, context)
            if not data or data == "" then
                return nil
            end
            local ok, json = pcall(vim.json.decode, data.body)
            if not ok then
                return {
                    status = "error",
                    output = "Could not parse JSON response",
                }
            end
            if data and data.status >= 400 then
                return {
                    status = "error",
                    output = json.error,
                }
            end
            -- JSON needs to have its backticks fixed. The Model reports
            -- that it cannot perform this action.
            json = json:gsub("`%s*`%s*`", "```")
            json = json:match("%*%*%* Begin Response%s*\n(.-)\n%s*%*%*%* End Response")
            data.body = json
            vim.print(data.body)
            return openai.handlers.inline_output(self, data, context)
        end,
        tools = {
            format_tool_calls = function(self, tools)
                return openai.handlers.tools.format_tool_calls(self, tools)
            end,
            output_response = function(self, tool_call, output)
                return openai.handlers.tools.output_response(self, tool_call, output)
            end,
        },
    },
    schema = {
        model = {
            default = "gitlab_duo",
        },
    },
}
